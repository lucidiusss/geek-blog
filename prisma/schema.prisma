// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         Int       @id @default(autoincrement())
  userId     String    @db.Uuid 
  username   String
  image      String 
  content    String
  picture    String?
  categoryId Int? 
  createdAt  DateTime  @default(now())


  category Category? @relation(fields: [categoryId], references:[id])
  user User @relation(fields: [userId], references: [id])

  comments Comment[]
  likes Like[]
  bookmarks Bookmark[]
}

model Category {
  id Int @id @default(autoincrement())
  avatar String
  short_name String
  name String
  description String
  createdAt DateTime @default(now())

  post Post[]
}


model User {
  id String @db.Uuid @unique
  shortId Int @id @default(autoincrement())
  profileImage String?
  bannerImage String?
  email String?
  name String?
  username String
  description String?

  createdAt DateTime @default(now())

  followedBy Follows[] @relation("followedTo")
  followedTo  Follows[] @relation("followedBy")
  comments Comment[]
  bookmarks Bookmark[]
  post Post[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  userId String @db.Uuid
  text String 
  postId Int
  createdAt DateTime @default(now())

  replyToId String? @db.Uuid

  likes Like[]

  post Post @relation(fields:[postId], references:[id])
  user User @relation(fields: [userId], references: [id])
}


model Like {
  id Int @id @default(autoincrement())
  userId  String @db.Uuid
  postId Int?
  commentId Int?
  createdAt DateTime @default(now())


  post Post? @relation(fields:[postId], references:[id])
  comment Comment? @relation(fields:[commentId], references:[id])
  user User @relation(fields: [userId], references: [id])
}


model Bookmark {
  id Int @id @default(autoincrement())
  userId  String @db.Uuid
  postId Int

  post Post @relation(fields:[postId], references:[id])
  user User @relation(fields: [userId], references: [id])

}

model Follows {
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  followedById String @db.Uuid
  followedTo  User @relation("followedTo", fields: [followedToId], references: [id])
  followedToId  String @db.Uuid

  @@id([followedToId, followedById])
}